#!/bin/bash

USERNAME="$1"
APPNAME="$2"
TITLE="$3"
DOMAIN="$4"
ADMINUSER="$5"
ADMINEMAIL="$6"
ADMINPASS="$7"
DBUSER="$8"
DBNAME="$9"
DBPASS="${10}"
DBPREFIX="${11}"
WEBSERVER="${12}"

SERVER_ROOT=/usr/local/lsws
WEBCF="$SERVER_ROOT/conf/httpd_config.conf"
WPPORT=80
SSLWPPORT=443

HOMEDIR="/home/$USERNAME/"
adduser --disabled-password --gecos "" $USERNAME &> /dev/null

echo -e "Create database and user for wordpress"
mysql -uroot -e "CREATE DATABASE IF NOT EXISTS $DBNAME /*\\!40100 DEFAULT CHARACTER SET utf8_general_ci */;"
mysql -uroot -e "CREATE USER IF NOT EXISTS '$DBUSER'@'localhost' IDENTIFIED BY '$DBPASS';GRANT ALL PRIVILEGES ON *.* TO '$DBUSER'@'localhost';FLUSH PRIVILEGES;"

echo -e "Download wp-cli"
curl -o /home/$USERNAME/wp-cli.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
chmod 777 /home/$USERNAME/wp-cli.phar
mv /home/$USERNAME/wp-cli.phar /usr/local/bin/wp

echo -e "Create app directory"
APPPATH="/home/$USERNAME/webapps/$APPNAME/"
sudo -u $USERNAME -i -- mkdir -p $APPPATH

# Download wordpress
echo -e "Download Wordpress"
sudo -u $USERNAME -i -- wp core download --path=$APPPATH --locale=en_US

# Config wordpress with username, database name and password.
sudo -u $USERNAME -i -- wp core config --path=$APPPATH --dbname=$DBNAME --dbuser=$DBUSER --dbpass=$DBPASS --dbprefix=$DBPREFIX

sudo -u $USERNAME -i -- wp core install --path=$APPPATH --title="$TITLE" --url=$DOMAIN --admin_user=$ADMINUSER --admin_email=$ADMINEMAIL --admin_password=$ADMINPASS

sudo chown -R www-data $APPPATH"wp-content/uploads"

function config_nginx
{
  # Remove already enabled sites.
  rm -r /etc/nginx/sites-enabled/*

  # Make nginx configuration file.
  NGINXCONFIG="/etc/nginx/sites-available/$APPNAME"
  rm $NGINXCONFIG

  tee -a $NGINXCONFIG <<EOF
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##
# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root $APPPATH;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html index.php;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files \$uri \$uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        location ~ \.php$ {
               include snippets/fastcgi-php.conf;

               # With php-fpm (or other unix sockets):
               fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;
               # With php-cgi (or other tcp sockets):
               # fastcgi_pass 127.0.0.1:9000;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}

# Virtual Host configuration for example.com
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files \$uri \$uri/ =404;
#       }
#}
EOF

  # Change file permission for nginx.conf
  chmod 777 $NGINXCONFIG

  # Make symbolic link
  ln -s $NGINXCONFIG /etc/nginx/sites-enabled/$APPNAME

  # Restart nginx service
  systemctl restart nginx
}

function config_vh_wp
{
    if [ -e "${WEBCF}" ] ; then
        cat ${WEBCF} | grep "virtualhost wordpress" >/dev/null
        if [ $? != 0 ] ; then
            sed -i -e "s/adminEmails/adminEmails $ADMINEMAIL\n#adminEmails/" "${WEBCF}"
            sed -i -e "s/ls_enabled/ls_enabled   1\n#/" "${WEBCF}"

            VHOSTCONF=$SERVER_ROOT/conf/vhosts/wordpress/vhconf.conf

            echo -e "Check existing port"
            grep "address.*:${WPPORT}$\|${SSLWPPORT}$"  ${WEBCF} >/dev/null 2>&1
            if [ ${?} = 0 ]; then
                echo -e "Detect port ${WPPORT} || ${SSLWPPORT}, will skip domain setup!"
            else
                echo -e "Create wordpress listener"
                cat >> ${WEBCF} <<END
listener wordpress {
    address                 *:$WPPORT
    secure                  0
    map                     wordpress $DOMAIN
}
listener wordpressssl {
    address                 *:$SSLWPPORT
    secure                  1
    map                     wordpress $DOMAIN
    keyFile                 $SERVER_ROOT/conf/$KEY
    certFile                $SERVER_ROOT/conf/$CERT
}
END
            fi

            echo -e "Insert wordpress virtual host"
            cat >> ${WEBCF} <<END
virtualhost wordpress {
    vhRoot                  $APPPATH
    configFile              $VHOSTCONF
    allowSymbolLink         1
    enableScript            1
    restrained              0
    setUIDMode              2
}
END

            echo -e "Create wordpress virtual host conf"
            mkdir -p $SERVER_ROOT/conf/vhosts/wordpress/
            cat > $VHOSTCONF <<END
docRoot                   \$VH_ROOT/
index  {
    useServer               0
    indexFiles              index.php
}
context / {
    location                \$VH_ROOT
    allowBrowse             1
    indexFiles              index.php
    rewrite  {
        enable                1
        inherit               1
        rewriteFile           $APPPATH.htaccess
    }
}
rewrite  {
    enable                  1
    autoLoadHtaccess        1
}
END
            chown -R lsadm:lsadm $SERVER_ROOT/conf/
        else
            echo -e "Detect wordpress exist, will skip virtual host conf setup!"
        fi
    else
        echo -e "${WEBCF} is missing. It appears that something went wrong during OpenLiteSpeed installation."
    fi
    echo -e 'End setup virtual host config'
}

function config_openlitespeed
{
    if [ -e "${WEBCF}" ] ; then
        sed -i -e "s/8088/$WPPORT/" "${WEBCF}"

        cat >> ${WEBCF} <<END
listener Defaultssl {
    address                 *:$SSLWPPORT
    secure                  1
    map                     Example *
    keyFile                 $SERVER_ROOT/conf/$KEY
    certFile                $SERVER_ROOT/conf/$CERT
    }
END
        chown -R lsadm:lsadm $SERVER_ROOT/conf/
    else
        echo -e "${WEBCF} is missing. It appears that something went wrong during OpenLiteSpeed installation."
    fi

    systemctl stop lsws >/dev/null 2>&1
    systemctl start lsws
}

if [[ "$WEBSERVER" == 'nginx' ]]; then
    config_nginx
else # Openlitespeed
    config_vh_wp
    config_openlitespeed
fi
